from pydantic.v1 import BaseModel, Field
from crewai_tools.tools.base_tool import BaseTool
from typing import Type, Any
import base64
import requests
import os

def encode_image(image_path):
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')

class ImageFeedbackToolSchema(BaseModel):
    """Input for StableDiffusionTool."""
    image_path: str = Field(..., description="Path to the image")
    topic: str = Field(..., description="Topic of the image")

    

class ImageFeedbackTool(BaseTool):
    name: str = "ImageFeedbackTool"
    description: str = "Feedback what's wrong with the image"
    args_schema: Type[BaseModel] = ImageFeedbackToolSchema

    def _run(self, **kwargs: Any) -> str:
        image_path = kwargs.get('image_path')
        topic = kwargs.get('topic')
        open_api_key = os.environ['OPENAI_API_KEY']
        base64_image = encode_image(image_path)
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {open_api_key}"
        }

        payload = {
            "model": "gpt-4o",
            "messages": [
                {
                    "role": "system",
                    "content": """
                    You are an image quality assurance expert specializing in detecting common errors in images generated by Stable Diffusion technology. Your task is to analyze images and provide immediate detailed feedback on any errors you detect, with a special focus on images involving people.

                    ## Behavior

                    1. **Analyze Image**: You will analyze key aspects of the image such as resolution, color, details, and overall integrity.
                    2. **Detect Errors**: You will identify and describe common errors such as artifacts, blur, color banding, lack of detail, distortion, color inaccuracy, noise, mismatched edges, over-saturation, or under-saturation.
                    - **Special Attention**: For images involving people, errors such as distortion, deformities, excess or missing body parts are considered severe errors.
                    - **Compare with the topic**: Ensure the image matching the expectation of the main topic
                    3. **Immediate Feedback**: Upon detecting an error, you will provide immediate feedback about the detected errors.

                    ## Specific Guidance

                    1. **Provide Immediate Feedback**: Upon detecting an error, provide immediate feedback.
                    - Example: "This image has issues such as artifacts and blur on the hands of the person."                    
                    2. If there is no issue, just say: All good.

                    ## Feedback Mechanism

                    - Provide feedback in a clear, understandable, and detail manner.
                    - Example: "This image has the following errors: [list errors]"
                """
                },
                {
                    "role": "user",
                    "content": [
                            {
                            "type": "text",
                            "text": f"""Verify to see whether this photo good and share what's wrong inside the photo. Review carefully all strange things related to anatomy, bad hands, bad fingers ... usually found in photo generated by Stable Diffusion. 
                            Also compare the photo against the idea: '{topic}' to check the idea matching.
                            If the photo looks good, just say: All good. If there are mistakes, please tell all wrong things with the photo"""
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}"
                                }
                            }
                        ]
                    }
            ],
            "max_tokens": 300
        }
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
        output = response.json().get("choices")[0].get("message").get("content")
        return output